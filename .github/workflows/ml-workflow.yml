name: MLflow Weather Prediction CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  train-model:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        activate-environment: ml-env
        environment-file: conda.yaml
        python-version: 3.9
        auto-activate-base: false
        
    - name: Verify Environment Setup
      shell: bash -l {0}
      run: |
        echo "=== Checking Python and Conda ==="
        python --version
        conda --version
        conda list | head -20
        
    - name: Install MLflow and Additional Dependencies
      shell: bash -l {0}
      run: |
        echo "=== Installing MLflow ==="
        pip install mlflow
        pip install matplotlib seaborn
        echo "=== Installed packages ==="
        pip list | grep -E "(mlflow|matplotlib|seaborn)"
        
    - name: Create Sample Data
      shell: bash -l {0}
      run: |
        echo "=== Creating sample weather data ==="
        python -c "
        import pandas as pd
        import numpy as np
        
        np.random.seed(42)
        n_samples = 1000
        
        data = {
            'Location': np.random.choice(['Jakarta', 'Bandung', 'Surabaya', 'Medan', 'Makassar'], n_samples),
            'Temperature_C': np.random.normal(27, 5, n_samples),
            'Humidity_pct': np.random.uniform(60, 90, n_samples),
            'Precipitation_mm': np.random.exponential(2, n_samples),
            'Wind_Speed_kmh': np.random.uniform(5, 25, n_samples)
        }
        
        df = pd.DataFrame(data)
        df['Temperature_C'] = np.round(df['Temperature_C'], 1)
        df['Humidity_pct'] = np.round(df['Humidity_pct'], 1)
        df['Precipitation_mm'] = np.round(df['Precipitation_mm'], 2)
        df['Wind_Speed_kmh'] = np.round(df['Wind_Speed_kmh'], 1)
        
        df.to_csv('weatherdata_preprocessing.csv', index=False)
        print(f'Sample data created: {df.shape}')
        print(df.head())
        "
        
    - name: Prepare Modeling Script for CI
      shell: bash -l {0}
      run: |
        echo "=== Creating CI-compatible modeling script ==="
        cat > modelling_ci.py << 'EOF'
        import mlflow
        import mlflow.sklearn
        import pandas as pd
        import numpy as np
        from sklearn.model_selection import train_test_split
        from sklearn.ensemble import RandomForestRegressor
        from sklearn.linear_model import LinearRegression
        from sklearn.tree import DecisionTreeRegressor
        from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
        from sklearn.preprocessing import LabelEncoder
        import matplotlib
        matplotlib.use('Agg')
        import matplotlib.pyplot as plt
        import warnings
        warnings.filterwarnings('ignore')
        
        def load_and_prepare_data():
            print("Loading and preparing data...")
            csv_path = "weatherdata_preprocessing.csv"
            
            try:
                df = pd.read_csv(csv_path)
                print(f"Data loaded successfully: {df.shape}")
                
                if 'Location' in df.columns:
                    le = LabelEncoder()
                    df['Location_encoded'] = le.fit_transform(df['Location'])
                
                feature_columns = ['Location_encoded', 'Humidity_pct', 'Precipitation_mm', 'Wind_Speed_kmh']
                X = df[feature_columns]
                y = df['Temperature_C']
                
                X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
                
                print(f"Data prepared: {X.shape[0]} samples, {X.shape[1]} features")
                return X_train, X_test, y_train, y_test, feature_columns
                
            except Exception as e:
                print(f"Error loading data: {str(e)}")
                return None, None, None, None, None
        
        def train_model(model, model_name, X_train, X_test, y_train, y_test, feature_columns):
            with mlflow.start_run(run_name=f"{model_name}_experiment"):
                mlflow.sklearn.autolog()
                
                print(f"\n--- Training {model_name} ---")
                
                model.fit(X_train, y_train)
                y_test_pred = model.predict(X_test)
                
                test_mse = mean_squared_error(y_test, y_test_pred)
                test_r2 = r2_score(y_test, y_test_pred)
                test_mae = mean_absolute_error(y_test, y_test_pred)
                
                mlflow.log_metric("test_mse", test_mse)
                mlflow.log_metric("test_r2", test_r2)
                mlflow.log_metric("test_mae", test_mae)
                mlflow.log_param("model_type", model_name)
                
                plt.figure(figsize=(8, 4))
                plt.scatter(y_test, y_test_pred, alpha=0.6)
                plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
                plt.xlabel('Actual Temperature')
                plt.ylabel('Predicted Temperature')
                plt.title(f'{model_name} - Actual vs Predicted')
                plt.savefig(f'{model_name}_evaluation.png')
                mlflow.log_artifact(f'{model_name}_evaluation.png')
                plt.close()
                
                print(f"Test MSE: {test_mse:.4f}")
                print(f"Test R²: {test_r2:.4f}")
                print(f"Test MAE: {test_mae:.4f}")
                
                return model
        
        def main():
            print("=== MLflow Weather Prediction Experiment ===")
            
            mlflow.set_tracking_uri("file:./mlruns")
            mlflow.set_experiment("Weather_Prediction_CI")
            
            X_train, X_test, y_train, y_test, feature_columns = load_and_prepare_data()
            
            if X_train is None:
                print("Data loading failed. Exiting...")
                return
            
            models = {
                "RandomForest": RandomForestRegressor(n_estimators=10, random_state=42),
                "LinearRegression": LinearRegression(),
                "DecisionTree": DecisionTreeRegressor(max_depth=5, random_state=42)
            }
            
            trained_models = {}
            for model_name, model in models.items():
                try:
                    trained_model = train_model(model, model_name, X_train, X_test, y_train, y_test, feature_columns)
                    trained_models[model_name] = trained_model
                    print(f"✅ {model_name} trained successfully")
                except Exception as e:
                    print(f"❌ Error training {model_name}: {str(e)}")
            
            print(f"\n=== Experiment Completed ===")
            print(f"Total models trained: {len(trained_models)}")
            
            with open('training_summary.txt', 'w') as f:
                f.write("=== MLflow Training Summary ===\n")
                f.write(f"Models trained: {len(trained_models)}\n")
                f.write(f"Models: {list(trained_models.keys())}\n")
                f.write(f"Features used: {feature_columns}\n")
            
            print("Training summary saved")
        
        if __name__ == "__main__":
            main()
        EOF
        echo "✅ CI modeling script created"
        
    - name: Run MLflow Training
      shell: bash -l {0}
      run: |
        echo "=== Running MLflow Training ==="
        python modelling_ci.py
        
    - name: Check Training Results
      shell: bash -l {0}
      run: |
        echo "=== Checking Training Results ==="
        ls -la
        
        if [ -d "mlruns" ]; then
          echo "✅ MLflow runs directory created"
          find mlruns -type f | head -10
        fi
        
        if ls *.png 1> /dev/null 2>&1; then
          echo "✅ Visualization plots created:"
          ls -la *.png
        fi
        
        if [ -f "training_summary.txt" ]; then
          echo "✅ Training summary:"
          cat training_summary.txt
        fi
        
    - name: Upload Training Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mlflow-training-results
        path: |
          mlruns/
          *.png
          *.txt
          *.csv
        retention-days: 30
